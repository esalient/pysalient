[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pysalient"
version = "0.0.1"
description = "pySALIENT: Python implementation of the SALIENT framework to assist with clinical AI research and implementation"
readme = "README.md"
requires-python = ">=3.11" 
license = { file = "LICENSE" }
authors = [
    { name = "pySALIENT Contributors" }
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "pydantic",
    "pyarrow",
    "numpy",
    "pandas",
    "scikit-learn"
]

[project.optional-dependencies]
dev = [
    "furo",
    "mypy",
    "myst-parser",
    "pytest",
    "pytest-cov", 
    "ruff",
    "sphinx",
    "pandas",
    "pyarrow",
    "pydantic",
    "scikit-learn",
    "jinja2"
]
examples = [
    "ipykernel",
    "jupyterlab",
]

  plot = [
      "matplotlib", 
  ]

[project.urls]
Homepage = "https://github.com/esalient/pysalient"
Repository = "https://github.com/esalient/pysalient"

########################
## PIXI CONFIGURATION ##
########################

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[tool.pixi.dependencies]
# Conda dependencies (prefer conda versions for better compatibility)
# Install from conda-forge to get native library dependencies
python = ">=3.11"
pyarrow = "*"
numpy = "*"
pandas = "*"
scikit-learn = "*"

[tool.pixi.feature.dev.dependencies]
# Development tools from conda
pytest = "*"
pytest-cov = "*"
ruff = "*"
mypy = "*"
sphinx = "*"
furo = "*"
myst-parser = "*"
jinja2 = "*"

[tool.pixi.feature.examples.dependencies]
jupyterlab = "*"
ipykernel = "*"

[tool.pixi.feature.plot.dependencies]
matplotlib = "*"

[tool.pixi.feature.pandera.dependencies]
# Pandera for data validation with pandas support
pandera = "*"

[tool.pixi.feature.pandera-testing.dependencies]
# Pandera with hypothesis and strategies for property-based testing
pandera-strategies = "*"

[tool.pixi.feature.pandera-io.dependencies]
# Pandera with I/O and mypy support
pandera-io = "*"
pandera-mypy = "*"

[tool.pixi.feature.pandera-dask.dependencies]
# Pandera with dask support
pandera-dask = "*"

[tool.pixi.feature.pandera-pyspark.dependencies]
# Pandera with pyspark support
pandera-pyspark = "*"

[tool.pixi.feature.pandera-polars.dependencies]
# Pandera with polars support
pandera-polars = "*"

[tool.pixi.environments]
default = { features = ["dev", "pandera"], solve-group = "default" }
examples = { features = ["dev", "examples", "pandera"], solve-group = "default" }
plot = { features = ["dev", "plot", "pandera"], solve-group = "default" }
# Pandera environments with different backends
pandera-testing = { features = ["dev", "pandera", "pandera-testing"], solve-group = "default" }
pandera-full = { features = ["dev", "pandera", "pandera-testing", "pandera-io"], solve-group = "default" }
pandera-dask = { features = ["dev", "pandera", "pandera-dask"], solve-group = "default" }
pandera-pyspark = { features = ["dev", "pandera", "pandera-pyspark"], solve-group = "default" }
pandera-polars = { features = ["dev", "pandera", "pandera-polars"], solve-group = "default" }
all = { features = ["dev", "examples", "plot", "pandera", "pandera-testing", "pandera-io"], solve-group = "default" }

[tool.pixi.tasks]
test = "pytest --cov=pysalient --cov-report=term-missing --cov-report=html tests/"
lint = "ruff check . --fix"
format = "ruff format ."
typecheck = "mypy pysalient"
docs = "sphinx-build -b html docs/source docs/build"

########################
## TOOL CONFIGURATION ##
########################

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

line-length = 88

# Assume Python 3.11+
target-version = "py311"

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/ for all rules
select = ["E", "F", "W", "I", "N", "UP"]
ignore = ["E501"] # Ignore line too long errors

# Allow autofix for all enabled rules (when --fix)
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use Python 3.6 formatting.
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
# Jupyter Notebook formatting is implicitly enabled by Ruff when encountering .ipynb files.
# The format options above apply to the Python code within notebooks.

[tool.pytest.ini_options]
# Specify which plugins to use
addopts = [
    "--cov=pysalient",
    "--cov-report=term-missing",
    "--cov-report=html",
    "-v"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
