name: pySALIENT CI

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*' # Trigger on version tags
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Use the minimum supported Python version
        python-version: ["3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install and configure uv
      run: |
        # Download and run the installer
        curl -LsSf https://astral.sh/uv/install.sh | sh

        # Add uv to PATH and make it available immediately
        export PATH="$HOME/.cargo/bin:$PATH"
        
        # Verify uv is installed and show its location
        which uv
        uv --version

    - name: Install dependencies
      run: |
        # Install directly into the GitHub Actions Python environment
        uv pip install --system -e ".[dev,examples]" # Include dev and examples extras

    - name: Lint and format with Ruff
      run: uv run ruff check . --fix

    - name: Test with pytest and generate coverage
      run: uv run pytest --cov=pysalient --cov-report=xml --cov-report=term-missing tests/

  update-version:
    # Run this job only when a tag starting with 'v' is pushed
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      # Required to push changes back to the repository
      contents: write
    steps:
    - name: Debug github.ref
      run: echo "GITHUB_REF is ${{ github.ref }}"
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch all history for all tags and branches
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Or your desired Python version

    - name: Extract version number from tag
      run: echo "VERSION_NUMBER=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

    - name: Update version in pyproject.toml
      run: |
        echo "Updating pyproject.toml to version ${{ env.VERSION_NUMBER }}"
        # This sed command attempts to find 'version = "..."' under the [project] section.
        # Adjust the regex if your version is under [tool.poetry] or elsewhere.
        sed -i "/^\[project\]/,/^\s*version =/ s/^\(\s*version\s*=\s*\)\".*\"/\1\"${{ env.VERSION_NUMBER }}\"/" pyproject.toml
        echo "pyproject.toml after update:"
        cat pyproject.toml

    - name: Update version in docs/source/conf.py
      run: |
        echo "Updating docs/source/conf.py to version ${{ env.VERSION_NUMBER }}"
        # This sed command finds the line starting with 'release =' and replaces the value.
        sed -i "s/^release = .*/release = '${{ env.VERSION_NUMBER }}'/" docs/source/conf.py
        echo "docs/source/conf.py after update:"
        cat docs/source/conf.py

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Commit and push changes
      run: |
        git add pyproject.toml docs/source/conf.py
        # Check if there are staged changes
        if git diff --staged --quiet; then
          echo "No version changes to commit."
        else
          echo "Committing version updates..."
          git commit -m "Update version to ${{ env.VERSION_NUMBER }} [skip ci]"
          # Determine the base branch (e.g., main or master)
          # This assumes the tag was pushed based on the default branch.
          BASE_BRANCH=$(git symbolic-ref --short refs/remotes/origin/HEAD | sed 's|origin/||')
          echo "Pushing updated version files to $BASE_BRANCH branch..."
          git push origin HEAD:$BASE_BRANCH
        fi
